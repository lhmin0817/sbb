# Local 개발 시 설정 파일 (application.properties)
# Remote 서비스를 작동 할 때 설정 파일 (application-prod.properties)

# java -Dspring.profile.active==prod -jar sbb-0.0.1-SNAPSHOT.jar
# 		application-prod.properties 파일이 설정 파일이 된다.



# 각종 설정을 셋팅하는 파일
# JDBC 셋팅, MyBatis Mapper
# properties 주석 
# netstat -na | more (cmd)
# 기본 포트 : 8080 
server.port=8080

# DevTools 활성화
spring.devtools.livereload.enabled=true
spring.freemarker.cache=false

# H2 DateBase 연결 설정 
# 원격에서 H2 DataBase 를 접속 할 수 있도록 허용
spring.h2.console.settings.web-allow-others=true

spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.url=jdbc:h2:~/local
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=1234

#JPA (JPA는 H2 DB와 연결 설정, 변경사항만 업데이트)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

#JPA 메소드를 사용할 경우 JPA가 SQL 쿼리를 생성해서 DB에 저장(Oracle, MySQL, MSSQL.....)
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true

# Logging 설정 30일 동안 사용 100MB마다 로그 기록 파일을 생성
logging.logback.rollingpolicy.max-history=30
logging.logback.rollingpolicy.max-file-size=100MB
logging.file.name=logs/sbb.log
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul

#Loging 설정 레벨
#1. trace (1 단계) : 아주 상세한 정보의 로그를 남긴다. (debug 보다 많은 정보를 남김)
#2. debug (2 단계) : 디버깅을 목적으로 사용
#3. info (3 단계) : 일반 정보를 출력할 때 사용 ← 기본 값 : default 
#4. warn (4 단계) : 경고 정보를 출력할 때 사용 (작은 문제)
#5. error (5 단계) : 오류 정보를 출력할 때 사용 (큰 문제)
#6. fatal (6 단계) : 치명적인 오류를 출력할 때 사용 (Kernel 에서 발생되는 문제)
logging.level.root=info